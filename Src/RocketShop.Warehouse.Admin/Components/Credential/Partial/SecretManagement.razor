@using RocketShop.Database.Model.Warehouse.Authorization
@using RocketShop.Framework.Extension
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.SharedFunction
@using RocketShop.SharedBlazor.Table
@using RocketShop.SharedBlazor.Tools
@using RocketShop.Warehouse.Admin.Components.Credential.Modal
@using RocketShop.Warehouse.Admin.Services
@inject IClientServices clientService

@code {
    [Parameter]
    public required long ClientId { get; set; }
    List<ClientSecret> clientSecrets = new();
    LoadingModal? loading;
    Client currentClient = new();
    DeleteSecretModal? delete;
    bool majorException, secretValidate, minorException;
    const string Headers = "Description;Expired;Created;";
    string secretValue = string.Empty;
    string? description;
    DateTime? expired;
    protected override async Task OnInitializedAsync()
    {
        majorException = false;
        minorException = false;
        try
        {
            var result = await clientService.ListSecret(ClientId);
            if (result.IsLeft)
                throw result.GetLeft()!;
            clientSecrets = result.GetRight()!;
            var currentClientResult = await clientService.GetClient(ClientId);
            if (currentClientResult.IsLeft)
            {
                minorException = true;
                return;
            }
            currentClient = currentClientResult.GetRight()!;
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task CreateSecret()
    {
        secretValidate = secretValue.IsNullOrEmpty();
        if (secretValidate)
            return;

        loading!.Open("Creating...");
        try
        {
            var result = await clientService.CreateClientSecret(ClientId, secretValue, description, expired);
            if (result.IsLeft)
                throw result.GetLeft()!;
            secretValue = string.Empty;
            description = null;
            expired = null;
            await activityLogService.Create("Warehouse Admin", "Client", $"Create Client Secret Of Client '{currentClient.ClientId}'");
            loading!.Close();
        }
        catch
        {
            await loading.Then(false, "Create Failed", "Failed");
        }
        finally
        {
            await OnInitializedAsync();
        }
    }
    void AutoGenerateSecret()
    {
        secretValue = Guid.NewGuid().ToString();
        StateHasChanged();
    }
    void DeleteBtnClicked(string secretId){
        delete!.AfterDeleteAction = async () => {
            await activityLogService.Create("Warehouse Admin", "Client", $"Delete Client Secret Of Client '{currentClient.ClientId}'");
            await OnInitializedAsync(); 
        };
        delete!.Open(secretId);
    }
}
<NHIF Condition="majorException">
    <NoOperation>
        <h3>Secret Management</h3>
        <NHIF Condition="minorException">
            <div class="alert alert-warning text-3xl font-bold" role="alert">
                This Current Operation ran With Problems.
                &nbsp;&nbsp;
                For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="OnInitializedAsync">Please Try Again.</button>
            </div>
        </NHIF>
        <br />
        <br />
        <div class="form-group">
            <label for="text">Secret Value</label>
            <input id="text" name="text" type="text" class="form-control @TextValidator.InvalidDisplay(secretValidate)" @bind-value="secretValue">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="AutoGenerateSecret">Auto Generate</button>
            </div>
        </div>
        <div class="form-group">
            <label for="text1">Expired</label>
            <input id="text1" name="text1" type="date" class="form-control" @bind-value="expired">
        </div>
        <div class="form-group">
            <label for="textarea">Description</label>
            <textarea id="textarea" name="textarea" cols="40" rows="5" class="form-control" @bind="description"></textarea>
        </div>
        <div class="form-group">
            <button name="submit" class="btn btn-primary" @onclick="CreateSecret">Create</button>
        </div>
        <br />
        <NHTypeTable Columns="@Headers"
                     Items="clientSecrets"
                     NoDataDisplayText="No Secret"
                     TableClass="table table-hoverd table-bordered"
                     TableBodyClass="table-success"
                     TableHeaderClass="table-dark">
            <tr>
                <td>@context.Description</td>
                <td>
                    <NHIF Condition="@context.Expired.HasValue">
                        @context.Expired!.Value.ToString("dd MMMM yyyy")
                    </NHIF>
                </td>
                <td>@context.Created.ToLocalDateAndTimeLongFormat()</td>
                <td>
                    <button class="btn btn-danger" @onclick="()=>DeleteBtnClicked(context.Id)"><i class="trash icon" /></button>
                </td>
            </tr>
        </NHTypeTable>
    </NoOperation>
    <YesOperation>
        <center>
            <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Clients </div>
        </center>
    </YesOperation>
</NHIF>
<LoadingModal @ref="loading" />
<DeleteSecretModal @ref="delete" />