@using RocketShop.Database.Model.Warehouse.Authorization
@using RocketShop.Framework.Extension
@using RocketShop.SharedBlazor.SharedFunction
@using RocketShop.SharedBlazor.Tools
@using RocketShop.Warehouse.Admin.Services
@inject IHttpContextAccessor httpContextAccessor
@inject IClientServices clientServices

@code {
    [Parameter]
    public required long ClientId { get; set; }
    bool clientIdInvalid, clientNameInvlid;
    Client item = new Client();
    LoadingModal? loading;
    protected override async Task OnInitializedAsync()
    {
        var itemResult = await clientServices.GetClient(ClientId);
        item = itemResult.GetRight()!;
        StateHasChanged();
    }
    async Task Submit()
    {
        clientIdInvalid = item.ClientId.IsNullOrEmpty();
        clientNameInvlid = item.ClientName.IsNullOrEmpty();
        if (clientIdInvalid.Or(clientNameInvlid))
            return;
        loading!.Open("Updating...");
        try
        {
            item.UpdateBy = httpContextAccessor.GetCurrentUserId();
            item.Updated = DateTime.UtcNow;
            var result = await clientServices.Update(item);
            if (result.IsLeft)
                throw result.GetLeft()!;
            await loading.Then(true, "Success", "Update Success");
        }
        catch
        {
            await loading.Then(false, "Failed", "Update Failed");
        }
        finally
        {
            StateHasChanged();
        }
    }
}
<div class="row">
    <div class="col-1"></div>
    <div class="col-10">
        <h1>General Information</h1>
        <div class="form-group">
            <label for="text">Client Id</label>
            <input id="text" name="text" @bind-value="item.ClientId" type="text" class="form-control @TextValidator.InvalidDisplay(clientIdInvalid)">
        </div>
        <div class="form-group">
            <label for="text1">Client Name</label>
            <input id="text1" name="text1" @bind-value="item.ClientName" type="text" class="form-control @TextValidator.InvalidDisplay(clientNameInvlid)">
        </div>

        <MudSwitch @bind-Value="item.RequireSecret" Label="Secret Required" Color="Color.Primary" Size="Size.Large" />
        <small style="font-weight:bolder">If not selected, it will be considered an Unsafe Client.</small>
        <br />
        <div class="form-group">
            <label for="text2">For Application</label>
            <input id="text2" name="text2" @bind-value="item.Application" type="text" class="form-control">
        </div>
        <div class="form-group">
            <label for="text3">Created</label>
            <input id="text3" name="text3" value="@item.Created.ToDateAndTimeFormat()" readonly type="text" class="form-control">
        </div>
        <div class="form-group">
            <label for="text4">Last Updated</label>
            <input id="text4" name="text4" value="@item.Updated.If(x=>x.HasValue,x=>x!.Value.ToDateAndTimeFormat(),x=> string.Empty)" readonly type="text" class="form-control">
        </div>
        <MudButton Variant="Variant.Filled" OnClick="Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save Changes</MudButton>
    </div>
    <div class="col-1"></div>
</div>
<LoadingModal @ref="loading" />