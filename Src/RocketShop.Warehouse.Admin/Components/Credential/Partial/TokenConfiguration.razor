@using Blazored.Typeahead
@using RocketShop.Database.Model.Warehouse.Authorization
@using RocketShop.Framework.Extension
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.SharedFunction
@using RocketShop.SharedBlazor.Tools
@using RocketShop.Warehouse.Admin.Services
@inject IHttpContextAccessor httpContextAccessor
@inject ITableInformationService tableInformationService
@inject IClientServices clientServices

@code {
    [Parameter]
    public required long ClientId { get; set; }
    Client item = new Client();
    LoadingModal? loading;
    bool majorException, minorException;
    List<string>? registerdCollections;
    IList<string>? allowedReadCollection;
    IList<string>? allowedWriteCollection;
    protected override async Task OnInitializedAsync()
    {
        majorException = false;
        minorException = false;
        try
        {
            var itemResult = await clientServices.GetClient(ClientId);
            if (itemResult.IsLeft)
                throw itemResult.GetLeft()!;
            item = itemResult.GetRight()!;
            registerdCollections = new List<string>();
            var tableResult = await tableInformationService.ListTableNames();
            var viewResult = await tableInformationService.ListViewNames();
            if (tableResult.IsLeft.Or(viewResult.IsLeft))
            {
                minorException = true;
                return;
            }
            var table = tableResult.GetRight()!;
            var view = viewResult.GetRight()!;
            if (table.HasData())
                registerdCollections.AddRange(table);
            if (view.HasData())
                registerdCollections.AddRange(view);
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task Submit()
    {
        loading!.Open("Updating...");
        try
        {
            item.UpdateBy = httpContextAccessor.GetCurrentUserId();
            item.Updated = DateTime.UtcNow;
            var result = await clientServices.Update(item);
            if (result.IsLeft)
                throw result.GetLeft()!;
            await activityLogService.Create("Warehouse Admin", "Client", $"Update Token Information Of '{item.Id} : {item.ClientId}'");
            await loading.Then(true, "Success", "Update Success");
        }
        catch
        {
            await loading.Then(false, "Failed", "Update Failed");
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task<IEnumerable<string>?> SearchCollection(string searchTerm) =>
    await Task.FromResult(registerdCollections?.Where(x => x.ToLower().Contains(searchTerm.ToLower())));
}
<NHIF Condition="majorException">
    <NoOperation>
        <NHIF Condition="minorException">
            <div class="alert alert-warning text-3xl font-bold" role="alert">
                This Current Operation ran With Problems.
                &nbsp;&nbsp;
                For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="OnInitializedAsync">Please Try Again.</button>
            </div>
        </NHIF>
        <div class="row">
            <div class="col-1"></div>
            <div class="col-10">
                <h2>Allowed Object & Expiration</h2>
                <div class="form-group">
                    <label for="textarea">Allowed Read Collection</label>
                    <BlazoredTypeahead class="form-control"
                                       @bind-Values="allowedReadCollection"
                                       Context="collection"
                                       SearchMethod="SearchCollection"
                                       EnableDropDown="true">
                                       <SelectedTemplate>@collection</SelectedTemplate>
                                       <ResultTemplate>@collection</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div class="form-group">
                    <label for="textarea">Allowed Write Collection</label>
                    <BlazoredTypeahead class="form-control"
                                       @bind-Values="allowedWriteCollection"
                                       Context="collection"
                                       SearchMethod="SearchCollection"
                                       EnableDropDown="true">
                        <SelectedTemplate>@collection</SelectedTemplate>
                        <ResultTemplate>@collection</ResultTemplate>
                    </BlazoredTypeahead>
                </div>

                <div class="form-group">
                    <label for="text">Token Expiration</label>
                    <div class="input-group">
                        <input id="text" name="text" type="number" @bind-value="item.TokenExpiration" min="0" class="form-control">
                        <div class="input-group-append">
                            <div class="input-group-text">Seconds</div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="text1">Token Maxiumn Access</label>
                    <div class="input-group">
                        <input id="text1" name="text1" type="number" @bind-value="item.MaxinumnAccess" min="0" class="form-control">
                        <div class="input-group-append">
                            <div class="input-group-text">Times</div>
                        </div>
                    </div>
                </div>
                <MudButton Variant="Variant.Filled" OnClick="Submit" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save">Save Changes</MudButton>
            </div>
            <div class="col-1"></div>
        </div>
    </NoOperation>
    <YesOperation>
        <center>
            <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Current Client </div>
        </center>
    </YesOperation>
</NHIF>

<LoadingModal @ref="loading" />