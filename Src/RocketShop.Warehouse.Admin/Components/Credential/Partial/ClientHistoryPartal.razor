@using Radzen
@using Radzen.Blazor
@using RocketShop.Database.Model.Warehouse.Authorization
@using RocketShop.Framework.Extension
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Table
@using RocketShop.Warehouse.Admin.Services
@inject IClientServices clientservices;

@code {
    [Parameter]
    public required long ClientId { get; set; }
    List<ClientHistory> clientHistories = new();
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int count = 0, lastpage = 1, currentpage = 1;
    bool majorException, minorException;
    protected override async Task OnInitializedAsync()
    {
        majorException = false;
        minorException = false;
        try
        {
            var historiesResult = await clientservices.CallHistory(ClientId, currentpage);
            if (historiesResult.IsLeft)
                throw historiesResult.GetLeft()!;
            clientHistories = historiesResult.GetRight()!;
            var countResult = await clientservices.CountHistory(ClientId);
            var lastpageResult = await clientservices.GetHistoryLastpage(ClientId);
            await Task.WhenAll(
                Task.Run( () =>
                {
                    
                    if (countResult.IsLeft)
                    {
                        minorException = true;
                        count = 0;
                        return;
                    }
                    count = countResult.GetRight()!;

                }),
                Task.Run( () =>
                {
                   
                    if (lastpageResult.IsLeft)
                    {
                        minorException = true;
                        lastpage = 1;
                        return;
                    }
                    lastpage = lastpageResult.GetRight()!;
                })

            );
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            StateHasChanged();
        }
    }
    async void PageChanged(PagerEventArgs args)
    {

        currentpage = args.PageIndex + 1;
        await OnInitializedAsync();
    }
}
<NHIF Condition="majorException">
    <YesOperation>
        <center>
            <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Client History </div>
        </center>
    </YesOperation>
    <NoOperation>
        <NHIF Condition="minorException">
            <div class="alert alert-warning text-3xl font-bold" role="alert">
                This Current Operation ran With Problems.
                &nbsp;&nbsp;
                For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="OnInitializedAsync">Please Try Again.</button>
            </div>
        </NHIF>
        <h1>Client Histories</h1>
        <h2>Count : @count</h2>
        <NHAutoTable Items="clientHistories"
            LoadingDisplayText="Loading"
            TableClass="table table-borderd table-hover"
            TableHeaderClass="table-dark"
            TableBodyClass="table-success" />
            <br />
                                <RadzenPager ShowPagingSummary="true"
                                 PagingSummaryFormat="@pagingSummaryFormat"
                                 HorizontalAlign="HorizontalAlign.Right"
                                 Count="@count"
                                 PageSize="10"
                                 PageNumbersCount="@lastpage"
                                 PageChanged="@PageChanged" />
    </NoOperation>
</NHIF>