@page "/Clients"
@using Radzen
@using Radzen.Blazor
@using RocketShop.Database.Model.Warehouse.Authorization
@using RocketShop.Framework.Extension
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Page
@using RocketShop.SharedBlazor.Table
@using RocketShop.Warehouse.Admin.Components.Credential.Modal
@using RocketShop.Warehouse.Admin.Services
@inject IClientServices clientServices

@code {
    List<Client> clients = new List<Client>();
    CreateClientModal? create;
    string? search, _search;
    int count, currentPage = 1, lastpage = 1;
    bool isLoading, majorException, minorException;
    const string Headers = "Client Id;Client Name;Locked;Application;";
    string? condition, pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authenicated = state.If(x => x.IsNotNull().And(x.User.Identity!.IsAuthenticated));
        if (!authenicated)
        {
            navigationManager.NavigateTo("/login");
            return;
        }
        await FetchData();
    }
    async Task FetchData()
    {
        majorException = false;
        minorException = false;
        try
        {
            var result = await clientServices.ListClient(search, currentPage, 20);
            if (result.IsLeft)
                throw result.GetLeft()!;
            clients = result.GetRight()!;
            var countResult = await clientServices.CountClient(search);
            var lastPageResult = await clientServices.GetLastpage(search, 20);
            await Task.WhenAll(
            Task.Run(() =>
            {
                if (countResult.IsLeft)
                {
                    minorException = true;
                    count = 0;
                    return;
                }
                count = countResult.GetRight()!;
            }),
             Task.Run(() =>
            {
                if (lastPageResult.IsLeft)
                {
                    minorException = true;
                    lastpage = 0;
                    return;
                }
                lastpage = lastPageResult.GetRight()!;
            })
            );
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            StateHasChanged();
        }

    }
    async void PageChanged(PagerEventArgs args)
    {

        currentPage = args.PageIndex + 1;
        await FetchData();
    }
    async Task SetSearch()
    {
        currentPage = 1;
        search = _search;
        await FetchData();
    }
}
<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.PolicyNames.AppAdminName">
        <Authorized>
            <NHIF Condition="majorException">
                <YesOperation>
                    <center>
                        <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Clients </div>
                    </center>
                </YesOperation>
                <NoOperation>
                    <NHIF Condition="minorException">
                        <div class="alert alert-warning text-3xl font-bold" role="alert">
                            This Current Operation ran With Problems.
                            &nbsp;&nbsp;
                            For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="FetchData">Please Try Again.</button>
                        </div>
                    </NHIF>
                    <h1 style="text-align:center">
                        Clients
                    </h1>
                    <br />
                    <br />
                    <div>
                        <div Class="row">
                            <div Class="col-5">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" @bind-value="_search" placeholder="Client Name" aria-describedby="basic-addon2">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-info" type="button" @onclick="SetSearch"><i class="search icon"></i> Search</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-5"></div>
                            <div class="col-2">
                                <h3 class="text-2xl font-semibold">Count : @count</h3>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="()=>create!.Open()">Create New Client</MudButton>
                    <br />
                    <br />
                    <NHTypeTable Items="clients"
                                 Columns="@Headers"
                                 LoadingFlagment="@isLoading"
                                 Context="client"
                                 TableClass="table table-hoverd"
                                 TableHeaderClass="table-dark"
                                 TableBodyClass="table-success">
                        <tr>
                            <td>@client.ClientId</td>
                            <td>@client.ClientName</td>
                            <td>
                                @if (DateTime.UtcNow < client.LockUntil)
                                {
                                    <i class="check icon" />
                                }
                            </td>
                            <td>@client.Application</td>
                            <td>
                                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Info" IconClass="@Icons.Material.Filled.Edit" />
                                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" IconClass="@Icons.Material.Filled.Delete" />
                            </td>
                        </tr>
                    </NHTypeTable>
                                        <RadzenPager ShowPagingSummary="true"
                                 PagingSummaryFormat="@pagingSummaryFormat"
                                 HorizontalAlign="HorizontalAlign.Right"
                                 Count="@count"
                                 PageSize="20"
                                 PageNumbersCount="@lastpage"
                                 PageChanged="@PageChanged" />
                </NoOperation>
            </NHIF>
        </Authorized>
        <NotAuthorized>
            <AccessDenied />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<CreateClientModal @ref="create" />