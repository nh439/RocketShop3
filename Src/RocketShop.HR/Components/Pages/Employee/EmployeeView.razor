@page "/employee"
@using RocketShop.Database.Model.Identity.Views
@using RocketShop.Framework.Extension
@using RocketShop.HR.ServicePermissions
@using RocketShop.HR.Services
@using RocketShop.HR.Components.Pages.Employee.Modal
@using RocketShop.Shared.SharedService.Scoped
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Loop
@using RocketShop.SharedBlazor.SharedBlazorServices.Scope
@using RocketShop.SharedBlazor.Table
@using Blazored.Typeahead
@using System.Security.Claims
@using RocketShop.SharedBlazor.Tools
@using System.Timers
@inject IUserServices userServices
@inject IExportExcelServices exportService
@inject IDownloadServices downloadService
@implements IDisposable
@rendermode InteractiveServer

@code {
    int count = 0,
        lastPage = 1,
        currentPage = 1;
    string countMsg = string.Empty,
    lastPageMsg = string.Empty,
    queryMsg = string.Empty;

    string? searchQuery, _searchQuery;

    List<UserView>? users = new List<UserView>();
    const string Headers = "Employee Id;Prefix;Firstname;Lastname;Email;Position;Department;Status;Locked Remaining;";
    bool isLoading = true;
    [CascadingParameter]
    public AuthenticationState? state { get; set; }
    DeleteEmployeeModal? deleteModal;
    LoadingModal? loading;
    UnlockConfirmation? unlock;
    LockConfirmation? locked;
    string? currentUser;
    System.Timers.Timer timer = new System.Timers.Timer();
    bool isFetching = false;
    protected override async Task OnInitializedAsync()
    {
        state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        state.If(x => x.IsNotNull() && x!.User.Identity!.IsAuthenticated, x =>
        {
            currentUser = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)!.Value;
            FetchData();
            timer = new Timer(1000);
            timer.Elapsed += Ticking;
            timer.Enabled = true;
        });
    }
    void Ticking(object? src, ElapsedEventArgs e)
    {
        if (!isFetching)
            FetchData();
    }

    async void FetchData()
    {
        isFetching = true;
        var userResult = await userServices.ListUsers(searchQuery, currentPage);
        var countResult = await userServices.GetCount(searchQuery);
        var lastPageResult = await userServices.GetLastpage(searchQuery);

        await Task.WhenAll(
            Task.Factory.StartNew(() =>
            {
                if (userResult.IsLeft)
                    queryMsg = userResult.GetLeft()!.Message;
                else
                    users = userResult.GetRight();

            }),
            Task.Factory.StartNew(() =>
            {
                if (countResult.IsLeft)
                    countMsg = countResult.GetLeft()!.Message;
                else
                    count = countResult.GetRight();

            }),
             Task.Factory.StartNew(() =>
            {
                if (lastPageResult.IsLeft)
                    lastPageMsg = lastPageResult.GetLeft()!.Message;
                else
                    lastPage = lastPageResult.GetRight();

            })
        );
        isLoading = false;
        isFetching = false;
        await InvokeAsync(StateHasChanged);
    }
    void DeleteBtnClicked(UserView user)
    {
        deleteModal!.AfterDeletedSuccessAction = () => FetchData();
        deleteModal!.Open(user.UserId, user.EmployeeCode);
    }
    void SetPage(int newPage)
    {
        currentPage = newPage;
        FetchData();
    }
    void SetSearch()
    {
        currentPage = 1;
        searchQuery = _searchQuery;
        FetchData();
    }
    async void Export()
    {
        loading?.Open("Gethering User Data...");
        var data = await userServices.ListUsers(searchQuery);
        if (data.IsLeft)
        {
            await loading?.Then(false, data.GetLeft()!.Message, "Export Failed");
            return;
        }
        loading?.SetText("Exporting...");
        var table = await data.GetRight()!.ToDataTableAsync();
        var encodedResult = exportService.ExportExcel(table);
        if (encodedResult.IsLeft)
        {
            await loading!.Then(false, encodedResult.GetLeft()!.Message, "Export Failed");
            return;
        }
        await downloadService.DownloadAsync($"employees_{DateTime.Now.ToString("yyyyMMdd")}.xlsx", encodedResult.GetRight()!);
        loading?.Close();
    }
    void IDisposable.Dispose()
    {
        timer?.Dispose();
    }
    void UnlockBtnClicked(string userId, string employeeCode) =>
    unlock!.Open(userId, employeeCode);

    void LockBtnClicked(string userId, string employeeCode) =>
    locked!.Open(userId, employeeCode);

}
<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.AllHRServiceName">
        <Authorized>
            <center>
                <h2 class="text-4xl font-extrabold ">Employee List</h2>
            </center>
            <br />
            <br />
            <br />
            <div>
                <div Class="row">
                    <div Class="col-5">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind-value="_searchQuery" placeholder="Employee Name" aria-label="Recipient's username" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-outline-info" type="button" @onclick="SetSearch"><i class="search icon"></i> Search</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-5"></div>
                    <div class="col-2">
                        <h3 class="text-2xl font-semibold">Count : @count</h3>
                    </div>
                </div>
            </div>
            <a href="/employee/create" class="bg-blue-600 hover:bg-blue-800 text-white font-bold py-1.5 px-4 rounded-full mx-1">
                <i class="plus icon" />  Add Employee
            </a>
            <button class="bg-green-600 hover:bg-green-800 text-white font-bold py-1 px-4 rounded-full mx-1" @onclick="Export">
                <i class="table icon" /> Export
            </button>
            <br />
            <br />
            <NHTypeTable TableClass="table table-hover table-bordered"
                         TableHeaderClass="table-dark"
                         TableBodyClass="table-info"
                         Columns="@Headers"
                         NoDataDisplayText="No Employees"
                         LoadingFlagment="@isLoading"
                         LoadingDisplayText="Loading..."
                         TItem="UserView"
                         Items="users"
                         Context="user">
                <tr>
                    <td>@user.EmployeeCode</td>
                    <td>@user.Prefix</td>
                    <td>@user.Firstname</td>
                    <td>@user.Surname</td>
                    <td>@user.Email</td>
                    <td>@user.Position</td>
                    <td>@user.Department</td>
                    <td>@(user.Active ? (user.Lock ? "Temporary Locked" : "Active") : "Inactive")</td>
                    <td>
                        <NHIF Condition="user.Lock">
                            <YesOperation>@user.LockRemaining.ToRemainingFormat()</YesOperation>
                        </NHIF>
                    </td>
                    <td>
                        <a href="/employee/@user.UserId" class="bg-teal-600 hover:bg-teal-800 text-white font-bold py-1 px-2 rounded-full mx-1" data-toggle="tooltip" data-placement="bottom" title="Edit User Data">
                            <i class="eye icon" />
                        </a>
                        <a href="/employee/@user.UserId/changepassword" class="text-purple bg-yellow-400 hover:bg-yellow-500 focus:outline-none focus:ring-4 focus:ring-yellow-300 font-medium rounded-full text-sm px-1.5 py-2 text-center me-2 mb-2 dark:focus:ring-yellow-900 mx-1" data-toggle="tooltip" data-placement="bottom" title="User Change Password">
                            <i class="key icon" />
                        </a>
                        <NHIF Condition="@(user.UserId != currentUser)">
                            <YesOperation>
                                <button class="bg-red-600 hover:bg-red-800 text-white font-bold py-1 px-2 rounded-full mx-1" @onclick="()=>DeleteBtnClicked(user)" data-toggle="tooltip" data-placement="bottom" title="Delete User">
                                    <i class="trash icon" />
                                </button>
                            </YesOperation>
                        </NHIF>
                        <NHIF Condition="@user.Active">
                            <YesOperation>
                                <NHIF Condition="user.Lock">
                                    <YesOperation>
                                        <button class="bg-gray-600 hover:bg-gray-800 text-white font-bold py-1 px-2 rounded-full mx-1" data-toggle="tooltip" data-placement="bottom" title="Unlock User" @onclick="()=>UnlockBtnClicked(user.UserId,user.EmployeeCode)">
                                            <i class="lock open icon"></i>
                                        </button>
                                    </YesOperation>
                                    <NoOperation>
                                        <button class="bg-gray-600 hover:bg-gray-800 text-white font-bold py-1 px-2 rounded-full mx-1" data-toggle="tooltip" data-placement="bottom" title="Temporary Lock User" @onclick="()=>LockBtnClicked(user.UserId,user.EmployeeCode)">
                                            <i class="lock icon"></i>
                                        </button>
                                    </NoOperation>
                                </NHIF>
                            </YesOperation>
                        </NHIF>                   
                    </td>
                </tr>
            </NHTypeTable>
            <br />
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    @if (currentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" @onclick="()=>SetPage(currentPage-1)" tabindex="-1">Previous</a>
                        </li>
                    }
                    @for (int idx = -5; idx <= 5; idx++)
                    {
                        var destional = currentPage + idx;
                        @if (destional > 0 && destional <= lastPage)
                        {
                            <li class="page-item @(idx==0 ? "active":"")"><a class="page-link" @onclick="()=>SetPage(destional)">@destional</a></li>
                        }
                    }
                    @if (currentPage < lastPage)
                    {
                        <li class="page-item">
                            <a class="page-link" @onclick="()=>SetPage(currentPage+1)">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        </Authorized>
        <NotAuthorized>
            Not Authorized
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<DeleteEmployeeModal @ref="deleteModal" />
<UnlockConfirmation @ref="unlock" />
<LockConfirmation @ref="locked" />
<LoadingModal @ref="loading" />