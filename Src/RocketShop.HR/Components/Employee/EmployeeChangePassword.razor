@page "/employee/{id}/changepassword"
@using RocketShop.Database.Model.NonDatabaseModel
@using RocketShop.Framework.Extension
@using RocketShop.HR.ServicePermissions
@using RocketShop.HR.Services
@using RocketShop.SharedBlazor.Tools
@inject IUserServices userService
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    public AuthenticationState? state { get; set; }
    string? newPassword, reTypePassword, name;
    UserProfile? profile;
    LoadingModal loading;
    protected override async Task OnInitializedAsync()
    {
        state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsNotNull() && state.User.Identity!.IsAuthenticated)
        {
            var profileResult = await userService.GetProfile(id);
            profile = profileResult.GetRight().Extract()!;
            name = $"{profile.Firstname} {profile.Surname}";
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            navigationManager.NavigateTo("/login");
        }
    }

    async void Submit()
    {
        loading.Open("Changing Password..", "Processing");
        if(newPassword.IsNullOrEmpty() || reTypePassword.IsNullOrEmpty())
        {
            await loading.Then(false, "New Password and Retype Password Not EMPTY", "Failed");
            return;
        }
        if(newPassword != reTypePassword)
        {
            await loading.Then(false, "Retype Password INCORRECT", "Failed");
            return;
        }
        try
        {
            var result = await userService.ResetPassword(id, newPassword);
            if (result.IsLeft)
                throw result.GetLeft()!;
            await activityLogService.Create("HR", "Employee", $"Change Password For '<{id}>'");
            await loading.Then(true, "Change Password Success", "Success", $"/employee/{id}");
        }
        catch(Exception x)
        {
            await loading.Then(false, x.Message, "Failed");
        }
    }

}
<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.HREmployeeName">
        <Authorized>
            <center>
                <div class="text-2xl font-bold">Change Password</div>
            </center>
            <br />
            <br />
            <br />
            <div class="row">
                <div class="col-1"></div>
                <div class="col-10">
                    <div class="form-group">
                        <label for="text">Employee Id</label>
                        <input id="text" readonly value="@profile?.EmployeeCode" name="text" type="text" class="form-control">
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="text1">Employee Email</label>
                        <input id="text1" readonly value="@profile?.Email" name="text1" type="text" class="form-control">
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="text2">Employee Name</label>
                        <input id="text2" readonly value="@name" name="text2" type="text" class="form-control">
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="text3">Password</label>
                        <input id="text3" name="text3" @bind-value="newPassword" type="password" class="form-control">
                    </div>
                    <br />
                    <div class="form-group">
                        <label for="text4">Retype Password</label>
                        <input id="text4" name="text4" @bind-value="reTypePassword" type="password" class="form-control">
                    </div>
                    <br />
                    <div class="form-group">
                        <button name="submit" class="btn btn-primary" @onclick="Submit">Change Password</button>
                    </div>
                </div>
                <div class="col-1"></div>
            </div>
        </Authorized>
        <NotAuthorized>
            Access Deined
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<LoadingModal @ref="loading" />