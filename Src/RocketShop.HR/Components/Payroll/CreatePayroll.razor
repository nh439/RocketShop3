@page "/Payroll/Create"
@using Blazored.Typeahead
@using RocketShop.Database.Model.Identity
@using RocketShop.Database.Model.Identity.Views
@using RocketShop.Database.Model.NonDatabaseModel
@using RocketShop.Framework.Extension
@using RocketShop.HR.ServicePermissions
@using RocketShop.HR.Services
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Page
@using RocketShop.SharedBlazor.SharedFunction
@using RocketShop.SharedBlazor.Table
@using Newtonsoft.Json
@using RocketShop.SharedBlazor.Tools
@using System.Timers
@inject IUserServices userService
@inject IPayrollServices payrollService
@inject IFinacialServices finacialServices
@rendermode InteractiveServer
@implements IDisposable


@code {
    UserPayroll userPayroll = new UserPayroll();
    List<AdditionalPayroll> additionalPayrolls = new();
    const string Headers = "Name;Balance;";
    LoadingModal? loading;
    UserView? selectedUser;
    bool alertDisplay,
    userValidate,
    payrollDateValidate,
    additionalNameValidate,
    currencyValidate;
    string? message;

    decimal totalAdditionalPay,
    salaryReceived;
    System.Timers.Timer timer = new System.Timers.Timer(500);
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state!.User.Identity!.IsAuthenticated)
        {
            timer.Elapsed += Calculating;
            timer.Enabled = true;
            StateHasChanged();
        }
    }


    void CreateAdditional()
    {
        additionalPayrolls.Add(new AdditionalPayroll
            {
                Currency = "THB",
                PayrollId = userPayroll.PayRollId
            });
        StateHasChanged();
    }
    void DeleteAdditional(string id)
    {
        additionalPayrolls = additionalPayrolls.Where(x => x.Id != id).ToList();
        StateHasChanged();
    }
    async Task<IEnumerable<UserView>> SearchEmployee(string searchTerm)
    {
        var result = await userService.ListActiveUsers(searchTerm, 1, 10,true);
        if (result.IsLeft)
        {
            alertDisplay = true;
            return new List<UserView>();
        }
        return result.GetRight()!;
    }

    async void Calculating(object? src, ElapsedEventArgs e)
    {
        await Task.WhenAll(
            Task.Run(TotalAdditionalCalculate),
            Task.Run(SalaryReceiveCalculate)
        );
    }

    void TotalAdditionalCalculate() =>
     totalAdditionalPay = additionalPayrolls.HasDataAndTranformData(
         t => t.Select(s => s.Value).Sum(),
     () => 0);

    void SalaryReceiveCalculate() =>
    salaryReceived =
    (userPayroll.Salary +
        userPayroll.TravelExpenses +
        additionalPayrolls.HasDataAndTranformData(
         t => t.Select(s => s.Value).Sum(),
     () => 0)
    ) - (userPayroll.ProvidentFund + userPayroll.SocialSecurites);

    async Task Submit()
    {
        userValidate = !selectedUser.IsNotNull();
        payrollDateValidate = !userPayroll.PayrollDate.IsNotNull();
        additionalNameValidate = additionalPayrolls.HasData() && additionalPayrolls.Where(x => x.Name.IsNullOrEmpty()).HasData();
        currencyValidate = userPayroll.Currency.IsNullOrEmpty();
        if (userValidate.Or(payrollDateValidate, additionalNameValidate, currencyValidate))
            return;
        var slip = new SlipData(userPayroll, additionalPayrolls);
        if (selectedUser.IsNotNull())
            slip.UserId = selectedUser!.UserId;
        loading!.Open("Creating...", "Create Payroll");
        try
        {
            slip.TotalAdditionalPay = totalAdditionalPay;
            slip.TotalPayment = salaryReceived;
            var result = await payrollService.Create(slip);
            await loading!.Then(true, "Payroll Created", "Success", "/payroll");
        }
        catch
        {
            await loading!.Then(false, "Error While Creating Payroll", "Failed");
        }
    }
    async Task SelectedResultChanged(UserView? result)
    {
        if(result.IsNotNull()){
            var finacialData = await finacialServices.GetFinacialData(result.UserId);
            var data = finacialData.GetRight().Extract();
            if (!userPayroll.IsNotNull()) userPayroll = new();
            userPayroll.Salary = data!.Salary;
            userPayroll.Currency = data.Currency;
            userPayroll.SocialSecurites = data.SocialSecurites;
            userPayroll.ProvidentFund = data.ProvidentFundPerMonth;
            userPayroll.TravelExpenses = data.TravelExpenses;
            if (!additionalPayrolls.HasData())
                additionalPayrolls = new();
            if(data.AddiontialExpenses.HasData())
                foreach(var addition in data.AddiontialExpenses!)
                {
                    var exists = additionalPayrolls.Where(x => x.Name == addition.ExpenseName).HasData();
                    if (exists)
                        additionalPayrolls.Where(x => x.Name == addition.ExpenseName).HasDataAndForEach(f => f.Value = addition.Balance);
                    else
                        additionalPayrolls.Add(new AdditionalPayroll
                        {
                            PayrollId = userPayroll.PayRollId,
                            Currency = data.Currency,
                            Name = addition.ExpenseName,
                            Value = addition.Balance
                        });
                }
            selectedUser = result;
        }
        else
        {
            selectedUser = null;
        }
        StateHasChanged();

    }
    void IDisposable.Dispose()
    {
        timer?.Dispose();
    }
}
<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.AllHRServiceName">
        <Authorized>
            <h1 class="text-2xl font-bold">Create Payroll</h1>
            <br />
            <br />
            <NHIF Condition="alertDisplay">
                <YesOperation>
                    <div class="alert alert-danger" role="alert">
                        An Error While Query Data. <button @onclick="()=>alertDisplay=false" class="alert-link">Dismiss</button>. Give it a click if you like.
                    </div>
                </YesOperation>
            </NHIF>
            <div class="row">
                <div class="col-1"></div>
                <div class="col-10">
                    <div class='row'>
                        <div class='col'>
                            <div class="form-group">
                                <label for="UserId">Employee</label>
                                <BlazoredTypeahead class="form-control"
                                                   id="UserId"
                                                   Context="emp"
                                                   EnableDropDown="true"
                                                   SearchMethod="SearchEmployee"
                                                   Value="selectedUser"
                                                   TValue="UserView"
                                                   TItem="UserView"
                                                   ValueChanged="SelectedResultChanged"
                                                   ValueExpression="@(() => selectedUser)">
                                    <ResultTemplate>
                                        @emp.EmployeeCode : @emp.Firstname @emp.Surname
                                    </ResultTemplate>
                                    <SelectedTemplate>
                                        @emp?.EmployeeCode : @emp?.Firstname @emp?.Surname
                                    </SelectedTemplate>
                                </BlazoredTypeahead>
                                <NHIF Condition="userValidate">
                                    <YesOperation><small style="color:red">Required.</small></YesOperation>
                                </NHIF>
                            </div>
                        </div>
                        <div class='col'>
                            <div class="form-group">
                                <label for="PayrollDate">Payroll Date</label>
                                <input id="PayrollDate" name="PayrollDate" type="date" @bind-value="userPayroll.PayrollDate" class="form-control @TextValidator.InvalidDisplay(payrollDateValidate)">
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="text1">Currency</label>
                                <input id="text1" name="text1" type="text" @bind-value="userPayroll.Currency" class="form-control @TextValidator.InvalidDisplay(currencyValidate)">
                            </div>
                        </div>
                    </div>
                    <div class='row'>
                        <div class='col'>
                            <div class="form-group">
                                <label for="Salary">Salary</label>
                                <input id="Salary" name="Salary" type="number" @bind-value="userPayroll.Salary" class="form-control">
                            </div>
                        </div>
                        <div class='col'>
                            <div class="form-group">
                                <label for="SocialSecurites">Social Securites</label>
                                <input id="SocialSecurites" name="SocialSecurites" @bind-value="userPayroll.SocialSecurites" type="number" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class='row'>
                        <div class='col'>
                            <div class="form-group">
                                <label for="ProvidentFund">Provident Fund</label>
                                <input id="ProvidentFund" name="ProvidentFund" @bind-value="userPayroll.ProvidentFund" type="number" class="form-control">
                            </div>
                        </div>
                        <div class='col'>
                            <div class="form-group">
                                <label for="TravelExpenses">Travel Expenses</label>
                                <input id="TravelExpenses" name="TravelExpenses" @bind-value="userPayroll.TravelExpenses" type="number" class="form-control">
                            </div>
                        </div>
                    </div>
                    <br />
                    <h2 class="text-2xl font-bold">Additional Expense</h2>
                    <br />
                    <hr />
                    <br />
                    <button class="btn btn-primary text-while rounded-full" @onclick="CreateAdditional"><i class="plus icon" /> Add Additional Payrolls</button>
                    <br />
                    <br />
                    <NHTypeTable Items="additionalPayrolls"
                                 Columns="@Headers"
                                 Context="additional"
                                 TableClass="table table-hover"
                                 TableHeaderClass="table-dark"
                                 TableBodyClass="table-primary">
                        <tr>
                            <td>
                                <div class="form-group">
                                    <input id="text" name="text" type="text" class="form-control @TextValidator.InvalidDisplay(additionalNameValidate && additional.Name.IsNullOrEmpty())" @bind-value="additional.Name">
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <input id="text" name="text" type="number" class="form-control" @bind-value="additional.Value">
                                </div>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="()=>DeleteAdditional(additional.Id)"><i class="trash icon" /></button>
                            </td>
                        </tr>
                    </NHTypeTable>
                    <br />
                    <br />
                    <div class="row" @onmouseover="StateHasChanged">
                        <div class="col">
                            <div class="form-group">
                                <label for="text">Total Additional</label>
                                <div class="input-group">
                                    <input id="text" name="text" value="@totalAdditionalPay.ToMoneyFormat()" type="text" class="form-control" readonly>
                                    <div class="input-group-append">
                                        <div class="input-group-text">THB</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="text">Salary Received</label>
                                <div class="input-group">
                                    <input id="text" name="text" value="@salaryReceived.ToMoneyFormat()" type="text" class="form-control" readonly>
                                    <div class="input-group-append">
                                        <div class="input-group-text">THB</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <button @onmouseover="StateHasChanged" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-bold rounded-full text-xl px-5 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" @onclick="Submit"><i class="plus icon" /> Create Payroll</button>
                    <br />
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <AccessDenied />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<LoadingModal @ref="loading" />