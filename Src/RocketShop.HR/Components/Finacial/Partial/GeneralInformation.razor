@using RocketShop.Database.Model.Identity.Views
@using RocketShop.Database.Model.NonDatabaseModel
@using RocketShop.Framework.Extension
@using RocketShop.HR.Services
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.SharedFunction
@using RocketShop.SharedBlazor.Tools
@inject IUserServices userService;
@inject IFinacialServices finacialServices;
@inject ILogger<GeneralInformation> logger;
@code {
    [Parameter]
    public string userId { get; set; }
    UserView user = new UserView();
    UserFinacialData data = new UserFinacialData();
    LoadingModal? loading;
    bool bankNameInvalid = false,
    accountNoInvalid = false,
    userRight = false,
    dataRight = false;

    protected override async Task OnInitializedAsync()
    {
        var userResult = await userService.GetUserViewById(userId);
        var dataResult = await finacialServices.GetFinacialData(userId, false);
        if (userResult.IsRight)
        {
            userRight = true;
            user = userResult.GetRight().Extract()!;
        }
        else
        {
            logger.LogError(userResult.GetLeft()!, userResult.GetLeft()!.Message);
            return;
        }
        if (dataResult.IsRight)
        {
            dataRight = true;
            data = dataResult.GetRight().Extract()!;
        }
        else
        {
            logger.LogError(dataResult.GetLeft()!, dataResult.GetLeft()!.Message);
            return;
        }
        await InvokeAsync(StateHasChanged);
    }
    void CalculateTotalPayment()
    {
        var fixPayment = data.SocialSecurites + data.ProvidentFundPerMonth;
        data.TotalPayment = data.Salary - fixPayment + (data.TravelExpenses + data.TotalAddiontialExpense);
        StateHasChanged();

    }
    async void Submit()
    {
        bankNameInvalid = data.BankName.IsNullOrEmpty();
        accountNoInvalid = data.AccountNo.IsNullOrEmpty();
        if (bankNameInvalid || accountNoInvalid) return;
        loading?.Open("Updating...");
        try
        {
            CalculateTotalPayment();
            var result = await finacialServices.UpdateFinacialData(data.GetUserFinancal);
            if (result.IsLeft)
                throw result.GetLeft()!;
            loading?.Then(true, "Update Success", "Success");
        }
        catch (Exception x)
        {
            logger.LogError(x, x.Message);
            loading?.Then(false, "Update Failed", "Failed");
        }
    }
    void SalaryChange(ChangeEventArgs e)
    {
        data.Salary = e.Value!.ToString().ToDecimal();
        CalculateTotalPayment();
    }
     void SocialSecuritesChange(ChangeEventArgs e)
    {
        data.SocialSecurites= e.Value!.ToString().ToDecimal();
        CalculateTotalPayment();
    }
     void TravelExpenseChange(ChangeEventArgs e)
    {
        data.SocialSecurites= e.Value!.ToString().ToDecimal();
        CalculateTotalPayment();
    }

}
<NHIF Condition="@(userRight && dataRight)">
    <YesOperation>
        <div class="row font-semibold text-xl">
            <div class="col-1"></div>
            <div class="col-10">
                <div class='row'>
                    <div class='col'>
                        <div class="form-group">
                            <label for="UserId">User</label>
                            <input id="AccountNo" value="@($"{user.Firstname} {user.Surname}")" name="AccountNo" type="text" class="form-control" readonly>
                        </div>
                    </div>
                    <div class='col'>
                        <div class="form-group">
                            <label for="Salary">Salary</label>
                            <input id="Salary" value="@data.Salary" @onchange="SalaryChange" name="Salary" type="number" class="form-control">
                        </div>
                    </div>
                </div>
                <br />
                <div class='row'>
                    <div class='col'>
                        <div class="form-group">
                            <label for="SocialSecurites">Social Securites</label>
                            <input id="SocialSecurites" value="@data.SocialSecurites" @onchange="SocialSecuritesChange" name="SocialSecurites" type="number" class="form-control">
                        </div>
                    </div>
                    <div class='col'>
                        <div class="form-group">
                            <label for="TravelExpenses">Travel Expenses</label>
                            <input id="TravelExpenses" value="@data.TravelExpenses" @onchange="TravelExpenseChange" name="TravelExpenses" type="number" class="form-control">
                        </div>
                    </div>
                </div>
                <br />
                <div class='row'>
                    <div class='col'>
                        <div class="form-group">
                            <label for="BankName">Bank Name</label>
                            <input id="BankName" @bind-value="data.BankName" name="BankName" type="text" class="form-control @TextValidator.InvalidDisplay(bankNameInvalid)">
                        </div>
                    </div>
                    <div class='col'>
                        <div class="form-group">
                            <label for="AccountNo">Account No</label>
                            <input id="AccountNo" @bind-value=data.AccountNo name="AccountNo" type="text" class="form-control @TextValidator.InvalidDisplay(accountNoInvalid)">
                        </div>
                    </div>
                </div>
                <br />
                <div class='row'>
                    <div class='col'>
                        <div class="form-group">
                            <label for="Currency">Currency</label>
                            <input id="Currency" @bind-value="data.Currency" name="Currency" type="text" class="form-control">
                        </div>
                    </div>
                    <div class="col"></div>
                </div>
                <br />
                <div class='row'>
                    <div class='col'>
                        <div class="form-group">
                            <label for="text">Total Additional Expenses (Monthly Only)</label>
                            <input id="text" value="@data.TotalAddiontialExpense.ToMoneyFormat()" type="text" readonly class="form-control">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="text1">Total Payment</label>
                            <input id="text1" value="@data.TotalPayment.ToMoneyFormat()" name="text1" type="text" readonly class="form-control">
                        </div>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <button name="submit" @onclick="Submit" class="btn btn-primary rounded-full text-white font-bold"><i class="save icon" /> Save</button>
                </div>
            </div>
        </div>
    </YesOperation>
    <NoOperation>
        <div class="text-2xl">Error While Getting Data</div>
    </NoOperation>
</NHIF>
<LoadingModal @ref="loading" />