@page "/subcategories"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using Radzen
@using Radzen.Blazor
@using RocketShop.Framework.Extension
@using RocketShop.Retail.Components.Pages.SubCategory.Modal
@using RocketShop.Retail.Model
@using RocketShop.Retail.Service
@using RocketShop.Shared.SharedService.Scoped
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Page
@using RocketShop.Database.Model.Retail
@using RocketShop.SharedBlazor.SharedBlazorServices.Scope
@using RocketShop.SharedBlazor.Table
@using RocketShop.SharedBlazor.Tools
@inject ICategoryServices categoryServices
@inject ILogger<SubcategoryIndex> logger
@inject IDownloadServices downloadServices
@inject IExportExcelServices exportServices

@code {
    List<BreadcrumbItem> items = new List<BreadcrumbItem>
    {
    new BreadcrumbItem("Home", href: "/"),
    new BreadcrumbItem("Category",  href: "/categories"),
    new BreadcrumbItem("Sub Category",  href: null ,disabled:true)
    };
    int count, currentPage = 1, lastpage = 1;
    bool isLoading, majorException, minorException;
    List<SubCategory> subCategories = new List<SubCategory>();
    List<MainCategory> mainCategories = new List<MainCategory>();
    CreateSubcategory create;
    UpdateSubcategory update;
    DeleteSubCategory delete;
    LoadingModal loading;
    const string Headers = "Id;Main Category;Name TH;Name EN;Inherit From Main Category;";
    string? search, _search, pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    protected override async Task OnInitializedAsync()
    {

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authenicated = state.IsNotNull().And(state!.User.Identity!.IsAuthenticated);
        if (authenicated)
            await FetchData();
        else
            navigationManager.NavigateTo("/login");
    }
    async Task FetchData()
    {
        majorException = false;
        minorException = false;
        try
        {
            var result = await categoryServices.ListSubCategories(search, currentPage);
            if (result.IsLeft)
                throw result.GetLeft()!;
            subCategories = result.GetRight()!;
            var countResult = await categoryServices.GetCountSubCategory(search);
            var lastPageResult = await categoryServices.GetLastPageSubCategory(search, 20);
            var maincategoryResult = await categoryServices.ListMainCategories();
            await Task.WhenAll(
                Task.Run(() =>
                {
                    if (countResult.IsLeft)
                    {
                        minorException = true;
                        count = 0;
                        return;
                    }
                    count = countResult.GetRight()!;
                }),
                Task.Run(() =>
                {
                    if (lastPageResult.IsLeft)
                    {
                        minorException = true;
                        lastpage = 1;
                        return;
                    }
                    lastpage = lastPageResult.GetRight()!;
                }),
                Task.Run(() =>
                {
                    if (maincategoryResult.IsLeft)
                    {
                        minorException = true;
                        mainCategories = new List<MainCategory>();
                        return;
                    }
                    mainCategories = maincategoryResult.GetRight()!;
                })
            );
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task PageChanged(PagerEventArgs args)
    {

        currentPage = args.PageIndex + 1;
        await FetchData();
    }
    async Task SetSearch()
    {
        currentPage = 1;
        search = _search;
        await FetchData();
    }
    void CreateSubCategoryBtnClicked()
    {
        create.AfterSubmitAction = async () => await FetchData();
        create.Open(mainCategories);
    }
     void UpdateSubCategoryBtnClicked(long id)
    {
        update.AfterSubmitAction = async () => await FetchData();
        update.Open(id);
    }
     void DeleteSubCategoryBtnClicked(SubCategory subCategory)
    {
        delete.AfterSubmitAction = async () => await FetchData();
        delete.Open(subCategory);
    }
    async Task GetTemplate()
    {
        loading!.Open("Exporting...");
        await Task.Delay(100);
        try
        {
            var data = new List<SubCategory>();
            var excelContent = exportServices.ExportExcel(await data.ToExcelModels(mainCategories).ToDataTableAsync());
            if (excelContent.IsLeft)
                throw excelContent.GetLeft()!;
            await activityLogService.Create("Retail", "Category", "Get Sub Category Template");
            await downloadServices.DownloadAsync($"Sub Category Template {DateTime.Now.ToString("ddMMyyyy_HHmmss")}.xlsx", excelContent.GetRight()!);
            logger.LogInformation("SubCategory Template Downloaded");
            loading.Close();

        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
            await loading.Then(false, "Error While Exporting Data", "Failed");
        }
        finally
        {
            StateHasChanged();
        }
    }
    async Task Export()
    {
        loading!.Open("Exporting...");
        await Task.Delay(100);
        try
        {
            var dataResult = await categoryServices.ListSubCategories();
            if (dataResult.IsLeft)
                throw dataResult.GetLeft()!;
            var data = dataResult.GetRight()!;
            var excelContent = exportServices.ExportExcel(await data.ToExcelModels(mainCategories).ToDataTableAsync());
            if (excelContent.IsLeft)
                throw excelContent.GetLeft()!;
            await activityLogService.Create("Retail", "Category", "Export Sub Category Data");
            await downloadServices.DownloadAsync($"Sub Category Data {DateTime.Now.ToString("ddMMyyyy_HHmmss")}.xlsx", excelContent.GetRight()!);
            logger.LogInformation("SubCategory Data Downloaded");
            loading.Close();

        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
            await loading.Then(false, "Error While Exporting Data", "Failed");
        }
        finally
        {
            StateHasChanged();
        }
    }
}
<h1 style="text-align:center">Sub Category</h1>

<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.PolicyNames.SellerManager" Context="authContext">
        <Authorized>
            <NHIF Condition="@majorException">
                <YesOperation>
                    <center>
                        <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Clients </div>
                    </center>
                </YesOperation>
                <NoOperation>
                    <NHIF Condition="@minorException">
                        <div class="alert alert-warning text-3xl font-bold" role="alert">
                            This Current Operation ran With Problems.
                            &nbsp;&nbsp;
                            For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="FetchData">Please Try Again.</button>
                        </div>
                    </NHIF>
                    <br />
                    <br />
                    <MudBreadcrumbs Items="items" />
                    <br />
                    <br />
                    <div>
                        <div Class="row">
                            <div Class="col-5">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" @bind-value="_search" placeholder="Category Name" aria-describedby="basic-addon2">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-info" type="button" @onclick="SetSearch"><i class="search icon"></i> Search</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-5">
                            </div>
                            <div class="col-2">
                                <h3 class="text-2xl font-semibold">Count : @count</h3>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <MudButton OnClick="CreateSubCategoryBtnClicked" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Create" Variant="MudBlazor.Variant.Filled">Create New Sub Category</MudButton>
                    <MudButton Variant="@MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Upload" Color="Color.Success">Create From Excel</MudButton>
                    <MudButton Variant="@MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Download" Color="Color.Info" @onclick="Export">Export Data</MudButton>
                    <MudButton Variant="@MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Download" Color="Color.Warning" @onclick="GetTemplate">Get Template</MudButton>
                    <br />
                    <br />
                    <NHTypeTable Items="subCategories"
                                 TableBodyClass="table-success"
                                 TableHeaderClass="table-dark"
                                 TableClass="table table-hover"
                                 Columns="@Headers">
                        <tr>
                            <td>@context.Id</td>
                            <td>
                                <NHIF Condition="@mainCategories.HasData()">
                                    @mainCategories.FirstOrDefault(x => x.Id == context.MainCategoryId)?.ToString()
                                </NHIF>
                            </td>
                            <td>@context.NameTh</td>
                            <td>@context.NameEn</td>
                            <td>
                                <NHIF Condition="@context.Primary">
                                    <i class="check icon" />
                                </NHIF>
                            </td>
                            <td>
                                <NHIF Condition="@context.Primary">
                                    <NoOperation>
                                        <button class="btn btn-info mx-1" @onclick="() => UpdateSubCategoryBtnClicked(context.Id)"><i class="edit icon" /></button>
                                        <button class="btn btn-danger mx-1" @onclick="()=> DeleteSubCategoryBtnClicked(context)"><i class="trash icon" /></button>
                                    </NoOperation>
                                </NHIF>
                            </td>
                        </tr>
                    </NHTypeTable>
                    <RadzenPager ShowPagingSummary="true"
                                 PagingSummaryFormat="@pagingSummaryFormat"
                                 HorizontalAlign="HorizontalAlign.Right"
                                 Count="@((int)count)"
                                 PageSize="20"
                                 PageNumbersCount="@lastpage"
                                 PageChanged="@PageChanged" />
                </NoOperation>
            </NHIF>
        </Authorized>
        <NotAuthorized>
            <AccessDenied />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<CreateSubcategory @ref="create" />
<UpdateSubcategory @ref="update" />
<DeleteSubCategory @ref="delete" />
<LoadingModal @ref="loading" />