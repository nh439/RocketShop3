@page "/categories"
@using MudBlazor
@using Radzen
@using Radzen.Blazor
@using RocketShop.Database.Model.Retail
@using RocketShop.Framework.Extension
@using RocketShop.Retail.Service
@using RocketShop.SharedBlazor.Condition
@using RocketShop.SharedBlazor.Page
@using RocketShop.SharedBlazor.Table
@inject ICategoryServices categoryServices
@code {
        int count, currentPage = 1, lastpage = 1;
        bool isLoading, majorException, minorException;
        const string Headers = "Id;Name TH;Name EN;";
        string? search,_search, pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
        List<MainCategory> mainCategories = new List<MainCategory>();
        List<BreadcrumbItem> items = new List<BreadcrumbItem>
    {
    new BreadcrumbItem("Home", href: "/"),
    new BreadcrumbItem("Category",  href: null, disabled: true)
    };
    protected override async Task OnInitializedAsync()
    {

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authenicated = state.IsNotNull().And(state!.User.Identity!.IsAuthenticated);
        if (authenicated)
            await FetchData();
        else
            navigationManager.NavigateTo("/login");
    }
    async Task FetchData()
    {
        majorException = false;
        minorException = false;
        try
        {
            var result = await categoryServices.ListMainCategories(search, currentPage);
            if (result.IsLeft)
                throw result.GetLeft()!;
            mainCategories = result.GetRight()!;
            var countResult = await categoryServices.GetCountMainCategory(search);
            var lastPageResult = await categoryServices.GetLastPageMainCategory(search, 20);
            await Task.WhenAll(
                Task.Run(() =>
                {
                    if (countResult.IsLeft)
                    {
                        minorException = true;
                        count = 0;
                        return;
                    }
                    count = countResult.GetRight()!;
                }),
                Task.Run(() =>
                {
                    if (lastPageResult.IsLeft)
                    {
                        minorException = true;
                        lastpage = 1;
                        return;
                    }
                    lastpage = lastPageResult.GetRight()!;
                })
            );
        }
        catch
        {
            majorException = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();

        }
    }
    async void PageChanged(PagerEventArgs args)
    {

        currentPage = args.PageIndex + 1;
        await FetchData();
    }
    async Task SetSearch()
    {
        currentPage = 1;
        search = _search;
        await FetchData();
    }
}
<CascadingAuthenticationState>
    <AuthorizeView Policy="@ServicePermission.PolicyNames.SellerManager">
        <Authorized>
            <NHIF Condition="majorException">
                <YesOperation>
                    <center>
                        <div class="alert alert-danger text-4xl font-bold" role="alert">Error While Gethering Clients </div>
                    </center>
                </YesOperation>
                <NoOperation>
                    <NHIF Condition="minorException">
                        <div class="alert alert-warning text-3xl font-bold" role="alert">
                            This Current Operation ran With Problems.
                            &nbsp;&nbsp;
                            For a Better experience <button class="btn btn-link text-3xl font-bold" @onclick="FetchData">Please Try Again.</button>
                        </div>
                    </NHIF>
                    <h1 style="text-align:center">Category</h1>
                    <br />
                    <br />
                    <MudBreadcrumbs Items="items" />
                    <br />
                    <br />
                    <div>
                        <div Class="row">
                            <div Class="col-5">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" @bind-value="_search" placeholder="Category Name" aria-describedby="basic-addon2">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-info" type="button" @onclick="SetSearch"><i class="search icon"></i> Search</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-5"></div>
                            <div class="col-2">
                                <h3 class="text-2xl font-semibold">Count : @count</h3>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <MudButton Variant="@MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create New Category</MudButton>
                    <br />
                    <br />
                    <NHTypeTable Items="mainCategories"
                                 Columns="@Headers"
                                 TableClass="table table-hover"
                                 TableHeaderClass="table-dark"
                                 TableBodyClass="table-success"
                                 Context="mainCategory"
                                 LoadingFlagment="isLoading"
                                 LoadingDisplayText="Loading...">
                        <tr>
                            <td>@mainCategory.Id</td>
                            <td>@mainCategory.NameTh</td>
                            <td>@mainCategory.NameEn</td>
                            <td>
                                <button class="btn btn-warning mx-1"><i class="fa-regular fa-pen-to-square"></i></button>
                                <button class="btn btn-danger mx-1"><i class="fa-solid fa-trash"></i></button>
                            </td>
                        </tr>
                    </NHTypeTable>
                     <RadzenPager ShowPagingSummary="true"
                                 PagingSummaryFormat="@pagingSummaryFormat"
                                 HorizontalAlign="HorizontalAlign.Right"
                                 Count="@((int)count)"
                                 PageSize="20"
                                 PageNumbersCount="@lastpage"
                                 PageChanged="@PageChanged" />
                </NoOperation>
            </NHIF>
        </Authorized>
        <NotAuthorized>
            <AccessDenied />
        </NotAuthorized>
    </AuthorizeView>

</CascadingAuthenticationState>

