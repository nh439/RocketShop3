@using RocketShop.Framework.Attribute
@using RocketShop.Framework.Extension
@using System.Reflection
@using RocketShop.SharedBlazor.Domain

@typeparam TItem
@code {
    /// <summary>
    /// Table CSS Class
    /// </summary>
    [Parameter]
    public string? TableClass { get; set; }
    /// <summary>
    /// thead CSS Class
    /// </summary>
    [Parameter]
    public string? TableHeaderClass { get; set; }
    /// <summary>
    /// tbody CSS Class
    /// </summary>
    [Parameter]
    public string? TableBodyClass { get; set; }
    /// <summary>
    ///  value indicating whether the fragment is currently loading.
    /// </summary>
    [Parameter]
    public bool LoadingFlagment { get; set; } = false;
    /// <summary>
    /// Message Display While Loading.
    /// </summary>
    [Parameter]
    public string LoadingDisplayText { get; set; } = "Loading...";
    /// <summary>
    /// Message Display If No Data In Collection
    /// </summary>
    [Parameter]
    public string NoDataDisplayText { get; set; } = "No Data";
    /// <summary>
    /// Item To Display In Table.
    /// </summary>
    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }
    /// <summary>
    /// Gets or sets the action to be called when a column is selected, with a column name and index.
    /// </summary>
    [Parameter]
    public Action<NHTableColumnClickedArgs>? OnSelectedColumn { get; set; } = null;

    [Parameter]
    public Action<NHAutoTableRowCellClickedArgs>? OnCellClicked { get; set; } = null;

    List<string> GetHeaders()
    {
        var properties = typeof(TItem).GetProperties();
        List<string> headers = new List<string>();
        foreach (var property in properties)
        {
            bool hasCustomDisplay = false;
            object[] attrs = property.GetCustomAttributes(true);
            foreach (var attr in attrs)
            {
                if (attr is NHAutoTableColumnDisplay)
                {
                    var display = attr as NHAutoTableColumnDisplay;
                    headers.Add(display!.ColumnDisplay);
                    hasCustomDisplay = true;
                    break;
                }
                if (attr is NHAutoTableSkipColumn)
                {
                    hasCustomDisplay = true;
                    break;
                }

            }
            if (!hasCustomDisplay)
                headers.Add(property.Name);
        }
        return headers;
    }
    int row = 0,column =0,position =0;
    void OnCellClick(string value,string propName ,int row,int col,int pos)
    {
        if (OnCellClicked.IsNotNull())
            OnCellClicked!(new(value,propName,row,col,pos));
    }

}

<NHTable Columns="@(string.Join( ";",GetHeaders()))"
         HasDataFlagment="@Items.HasData()"
         LoadingDisplayText="@LoadingDisplayText"
         LoadingFlagment="@LoadingFlagment"
         TableBodyClass="@TableBodyClass"
         NoDataDisplayText="@NoDataDisplayText"
         TableClass="@TableClass"
         TableHeaderClass="@TableHeaderClass"
         OnSelectedColumn="@(OnSelectedColumn.IsNotNull() ?  OnSelectedColumn! : default!)">
    @code {
        PropertyInfo[] properties = typeof(TItem).GetProperties();
    }
    @{
        row = 0;
        column = 0;
        position = 0;
    }
    @foreach (var item in Items!)
    {
        <tr>
            @{
                column = 0;
            }
            @foreach (var property in properties)
            {
                var _col = column;
                var _row = row;
                var _pos = position;
                @if (property.GetCustomAttribute(typeof(NHAutoTableSkipColumn)) is null)
                {
                    var value = property.GetValue(item);
                    if (value.IsNotNull() && value!.GetType() == typeof(bool) && ((bool?)value).IsTrue() && property.GetCustomAttribute(typeof(NHAutoTableTrueDisplay)).IsNotNull())
                    {
                        var attr = property.GetCustomAttribute(typeof(NHAutoTableTrueDisplay)) as NHAutoTableTrueDisplay;

                        <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@((MarkupString)attr!.HtmlContent)</td>
                    }
                    else if (value.IsNotNull() && value!.GetType() == typeof(bool) && ((bool?)value).IsFalse() && property.GetCustomAttribute(typeof(NHAutoTableFalseDisplay)).IsNotNull())
                    {
                        var attr = property.GetCustomAttribute(typeof(NHAutoTableFalseDisplay)) as NHAutoTableFalseDisplay;

                        <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@((MarkupString)attr!.HtmlContent)</td>
                    }
                    else
                    {
                        @if (value is null && property.GetCustomAttribute(typeof(NHAutoTableNullDisplay)) is not null)
                        {
                            var attr = property.GetCustomAttribute(typeof(NHAutoTableNullDisplay)) as NHAutoTableNullDisplay;

                            <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@((MarkupString)attr!.DisplayWhileNull)</td>
                        }
                        else
                        {
                            @if (value is not null && value.IsNumericType() && property.GetCustomAttribute(typeof(NHAutoTableNumberFormatDisplay)) is not null)
                            {
                                var attr = property.GetCustomAttribute(typeof(NHAutoTableNumberFormatDisplay)) as NHAutoTableNumberFormatDisplay;
                                var val = (decimal)value;
                                <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@val.ToString(attr!.FormatType)</td>
                            }
                            else if (value is not null && value.GetType() == typeof(DateTime) && property.GetCustomAttribute(typeof(NHAutoTableDateTimeFormatDisplay)) is not null)
                            {

                                var attr = property.GetCustomAttribute(typeof(NHAutoTableDateTimeFormatDisplay)) as NHAutoTableDateTimeFormatDisplay;
                                var val = (DateTime)value;
                                <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@val.ToString(attr!.FormatType)</td>
                            }
                            else{

                                if (value is not null  && property.GetCustomAttribute(typeof(NHAutoTableNewLineSeparator)) is not null)
                                {
                                    var attr = property.GetCustomAttribute(typeof(NHAutoTableNewLineSeparator)) as NHAutoTableNewLineSeparator;

                                    <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)"> @((MarkupString)value.ToString()!.Replace(attr!.Separator, "<br />"))</td>
                                }
                                else if(value is not null){
                                    <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)">@value</td>
                                }
                                else
                                {
                                    <td @onclick="()=>OnCellClick(value.IsNotNull() ? value.ToString()! :string.Empty,property.Name,_row,_col,_pos)"></td>
                                }
                                
                            }
                        }
                    }
                    position++;
                    column++;
                }
            }
        </tr>
            row++;        
    }
</NHTable>
