networks:
  rcs_network:
    driver: bridge

services:
  migration :
    build :
      context : .
      dockerfile : Src\RocketShop.Migration\Dockerfile
    ports :
      - "12003:80"
    env_file:
      - .env
    depends_on :
       db:
        condition: service_started
    networks :
      - rcs_network    
    healthcheck:
      test: "exit 0"

  identity :
    build :
      context : .
      dockerfile : Src\RocketShop.Identity\Dockerfile
    ports :
      - "12000:8080"
    env_file:
      - .env
    depends_on :
      - migration
    networks :
      - rcs_network

  hr :
    build :
      context : .
      dockerfile : Src\RocketShop.HR\Dockerfile
    ports :
      - "12002:8080"
    env_file:
      - hr.env
      - .env
    depends_on :
      - migration
    networks :
      - rcs_network

  retail :
    build :
      context : .
      dockerfile : Src\RocketShop.Retail\Dockerfile
    ports :
      - "12007:8080"
    env_file:
      - retail.env
      - .env
    depends_on :
      - migration
    networks :
      - rcs_network

  warehouse :
    build :
      context : .
      dockerfile : Src\RocketShop.Warehouse\Dockerfile
    ports :
      - "12004:8080"
    env_file:
      - warehouse.env
      - .env
    depends_on :
      - migration
    networks :
      - rcs_network
  
  warehouse_admin :
      build :
        context : .
        dockerfile : Src\RocketShop.Warehouse.Admin\Dockerfile
      ports :
        - "12006:8080"
      env_file:
        - warehouse_admin.env
        - .env
      depends_on :
        - migration
      networks :
        - rcs_network
  
  domainservice :
    build :
      context : .
      dockerfile : Src\RocketShop.DomainCenter\Dockerfile
    ports :
      - "12001:8080"
    depends_on :
      - migration
    networks :
      - rcs_network
    volumes:
      - ./documents:/app/documents
    env_file:
      - domain.env
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip
      
  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 512mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    networks :
      - rcs_network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks :
      - rcs_network  
    